<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis-集群-切片集群</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/ji-qun-qie-pian-ji-qun/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/ji-qun-qie-pian-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="大数据量时的扩展"><a href="#大数据量时的扩展" class="headerlink" title="大数据量时的扩展"></a>大数据量时的扩展</h2><p>当Redis数据量很大时，如果采用 RDB进行持久化时，fork子进程会阻塞主进程。</p><p>若不采用RDB进行持久化，可以采用的两种方案进行扩展：</p><p>纵向扩展： 升级单个Redis实例的资源配置，包含增加内存容量、增加磁盘容量、使用更高的CPU。</p><p>横向扩展： 增加Redis 实例数量，将数据均匀分布到各Redis实例，这就是切片集群。</p><h2 id="数据切片与实例的对应分布关系"><a href="#数据切片与实例的对应分布关系" class="headerlink" title="数据切片与实例的对应分布关系"></a>数据切片与实例的对应分布关系</h2><ol><li><p>Redis Cluster 采用哈希槽（hash slot）来处理数据和实例之间的映射关系。</p></li><li><p>在Redis Cluster 中，一个切片集群有16384个哈希槽，每个键值对都会根据它的key，被映射到一个哈希槽中。</p></li><li><p>映射过程：</p></li><li><ol><li>使用键值对的key ，按照CRC16算法计算一个16bit的值；</li><li>然后再用计算得来的值对16384取模，得到一个0~16383范围内的模数；</li><li>最后根据这个模数就能找到对应的哈希槽。</li></ol></li><li><p>我们在部署 Redis Cluster方案时，可以使用 <code>cluster create</code> 命令创建集群，此时，Redis会把这些槽平均分配到各个实例上。我们还能通过 <code>cluster meet</code> 命令手动建立实例间的连接，形成集群，再使用 <code>cluster addslots</code> 指定每个实例上的哈希槽个数。</p></li></ol><p><strong>在手动分配哈希槽时，需要把16384个槽都分配完，否则Redis集群无法工作。</strong></p><h2 id="客户端如何定位数据"><a href="#客户端如何定位数据" class="headerlink" title="客户端如何定位数据"></a>客户端如何定位数据</h2><ol><li><p>客户端和集群实例建立连接后，实例就会把哈希槽的分配信息发给客户端。</p></li><li><p>由于Redis 实例会把自己的哈希槽信息发给和它相连接的其他实例，所以客户端访问任何一个实例都能获取到所有的哈希槽信息。</p></li><li><p>哈希槽与实例之间的对应关系可能发生变化：</p></li><li><ol><li>当有实例新增或删除时，需要重新分配哈希槽。</li><li>为了负载均衡，哈希槽会被在所有实例上重新分配一遍。</li></ol></li><li><p>当哈希槽与实例之间发生变化时，会导致客户端中缓存的分配信息与最新的分配信息不一致。</p></li></ol><p>此时Redis 采用<strong>重定向机制</strong>，保证客户端能访问到最新的实例，存在两种情况：</p><ul><li><ul><li>当哈希槽上的数据已经完成了迁移，客户端在访问旧实例时，会收到 <code>MOVED</code> 命令结果，如下。此时客户端会再次向新实例发送请求，并更新本地缓存。</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">GET hello:key(error) MOVED &lt;slot&gt; &lt;new instance&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><ul><li>当哈希槽上的数据正在迁移中，只迁移了部分数据。若客户端在访问旧实例时没有返回数据，则会收到 <code>ASK</code> 命令结果，如下。此时客户端会给新实例发送一个ASKING命令（让新实例允许执行客户端接下来发送的命令），然后再向新实例发起GET请求，以读取数据。</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">GET hello:key(error) ASK &lt;slot&gt; &lt;new instance&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><ul><li><code>MOVE</code> 和 <code>ASK</code> 的区别在于，ASK命令并不会更新客户端缓存的哈希槽分配信息。</li></ul></li></ul><h2 id="切片集群与哨兵模式的优缺点"><a href="#切片集群与哨兵模式的优缺点" class="headerlink" title="切片集群与哨兵模式的优缺点"></a>切片集群与哨兵模式的优缺点</h2><ol><li>切片集群支持比哨兵模式更大的数据量。 数据量级分别多大？</li><li>哨兵模式下由于各实例数据冗余，所以不易丢失数据，而切点集群方案下，可能造成某一切片数据丢失。这个应该也有解决方案？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-哨兵模式</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/shao-bing-mo-shi/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/shao-bing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="哨兵的主要作用"><a href="#哨兵的主要作用" class="headerlink" title="哨兵的主要作用"></a>哨兵的主要作用</h2><blockquote><p>为实现主从切换，主要功能为<strong>监控、选主、通知</strong></p></blockquote><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>哨兵发送ping命令检查主从库的网络连接状态，若ping响应超时，则标记为“主观下线”，如果存在半数以上的哨兵判断主库为“主观下线”，则标识主库为“客观下线”。</p><h3 id="选主"><a href="#选主" class="headerlink" title="选主"></a>选主</h3><p>主库“客观下线”之后，会重新选主。选主流程如下：</p><ul><li><p>过滤掉 <strong>已经下线后的从库</strong> 和 <strong>总是和主库断连的从库</strong>（超过断连次数的阈值）</p></li><li><p>在剩下的从库中按照一定的规则对从库进行打分，得分高者升级为主库</p></li><li><ul><li><strong>优先级高</strong>的从库得分高，可通过slave-priority设置从库的优先级</li><li><strong>同步进度最快</strong>的从库，得分高，比较从库的slave-repli-offset</li><li><strong>从库ID号小</strong>的得分高</li></ul></li></ul><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>通知从库重新同步新主库的数据。哨兵会把新主库的地址写入自己实例的pubsub(switch-master)中，客户端订阅pubsub 就能感知到主库</p><h2 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h2><blockquote><p>特点:  哨兵集群存在故障节点时，只要集群中大部分节点正常，集群依旧能对外提供服务。 “拜占庭问题”。</p></blockquote><p><strong>问题：</strong> 主库下线后由谁来执行新主库的切换？</p><p><strong>答：</strong> 从哨兵中选举出一个哨兵领导者。 每个哨兵设置一个随机超时时间，超时后向其他哨兵请求投票，其他哨兵会给第一个向自己发送投票请求的哨兵进行投票，可能经过多次投票后（若在一个回合中没有投出来，哨兵集群会等待一段时间（也就是哨兵故障转移超时时间的 2 倍），再重新进行投票），<strong>投票数超过半数</strong>且<strong>投票数****大于等于哨兵配置文件中的 quorum 值</strong>的为哨兵领导者。</p><blockquote><p>需要注意的是，如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。因此，通常我们至少会配置 3 个哨兵实例。这一点很重要，你在实际应用时可不能忽略了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-单机部署</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/dan-ji-bu-shu/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/dan-ji-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载安装包wget http://download.redis.io/releases/redis-6.0.6.tar.gz# 解压tar -xvf redis-6.0.6.tar.gz# 创建软连接ln -s redis-6.0.6 redis# 编译，这里需要系统安装gccmake# 安装make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装完成后，在usr/local/bin 下能看到redis开头的可执行文件，所以我们可以在任意位置使用这些命令</p></blockquote><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105708.png" alt="image.png"></p><blockquote><p>比如： <code>redis-cli  -v</code> 查看版本</p></blockquote><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/1597412456550-d2fe25fd-2a88-47bf-b3be-8c82a940e889.png" alt="image.png"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol><li>直接使用 <code>redis-server</code> 命令启动。 但此时不是后台运行，需要重开窗口才能连接。此时等待客户端连接</li></ol><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105722.png" alt="image.png"></p><ol start="2"><li>后台启动方式一： 指定后台启动参数， <code>redis-server --daemonize yes</code> </li></ol><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105731.png" alt="image.png"></p><ol start="3"><li>后台启动方式二： 修改redis.conf中后台启动参数，并指定redis.conf启动， <code>redis-server /root/soft/redis/redis.conf</code></li></ol><p><strong>此处的redis.conf一般放到指定路径进行管理</strong></p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105742.png" alt="image.png"></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ol><li><p>断开和客户端的连接、持久化文件的生成，这个过程才算一种相对优雅的关闭。</p></li><li><p>可以使用 <code>kill 进程号</code> ，但不能 <code>kill -9 进程号</code> 强制杀死服务，否则有可能造成AOF和复制丢失数据的情况。</p></li><li><p><code>redis-cli shutdown nosave|save</code> ,  nosave : 在关闭前，不生成持久化文件； save ： 在关闭前，生成持久化文件。</p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105750.png" alt="image.png"></p></li></ol><blockquote><p>存在密码时的关闭</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@iZ8vb7b3jqfu07tzh9tot8Z redis]# redis-cli -a root shutdownWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ol><li>使用 <code>redis-cli</code> 直接连接，默认主机 127.0.0.1 ，默认端口6379</li><li>使用 <code>redis-cli -h 127.0.0.1 -p 6379</code> 指定主机和端口</li></ol><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105757.png" alt="image.png"></p><p>redis实例默认存在16个库(0-15)，默认访问0库</p><blockquote><p>切换库</p></blockquote><p><strong><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105803.png" alt="image.png"></strong></p><p>or 修改 redis.conf</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#dbredis.db = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><blockquote><p>临时，重启服务后失效</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">127.0.0.1:6379&gt; config set requirepass rootOK127.0.0.1:6379&gt; config get requirepass1) "requirepass"2) "root"127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>长期，配置在redis.conf中,重启服务不会失效</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">requirepass xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="授权登录"><a href="#授权登录" class="headerlink" title="授权登录"></a>授权登录</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@iZ8vb7b3jqfu07tzh9tot8Z redis]# redis-cli127.0.0.1:6379&gt; get test:hello(error) NOAUTH Authentication required.  127.0.0.1:6379&gt; auth rootOK127.0.0.1:6379&gt; get test:hello"world"127.0.0.1:6379&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>or</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@iZ8vb7b3jqfu07tzh9tot8Z redis]# redis-cli -a rootWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.127.0.0.1:6379&gt; get test:hello"world"127.0.0.1:6379&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认配置项-redis-conf"><a href="#默认配置项-redis-conf" class="headerlink" title="默认配置项(redis.conf)"></a>默认配置项(redis.conf)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 绑定主机,注释掉则能监听到远程主机的连接bind 127.0.0.1## 开启保护模式下，远程主机无法访问redisprotected-mode yes## 端口port 6379tcp-backlog 511timeout 0tcp-keepalive 300## 是否以守护进程的方式启动daemonize nosupervised nopidfile /var/run/redis_6379.pidloglevel notice## 日志文件，请注意，如果您使用标准输出（""）进行日志记录但进行守护进程，则日志将发送到/dev/null，## 指定日志文件，目录要提前创建,如：## logfile "/root/soft/logs/redis/redis.out"logfile ""## schemadatabases 16always-show-logo yes## 设置RDB的刷新时机，save m n 表示m秒内数据集存在n次修改。save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yes## 开启RDB文件压缩rdbcompression yesrdbchecksum yes## RDB文件名dbfilename dump.rdbrdb-del-sync-files no## 存放持久化文件和日志文件dir ./replica-serve-stale-data yesreplica-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-diskless-load disabledrepl-disable-tcp-nodelay noreplica-priority 100acllog-max-len 128lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush nolazyfree-lazy-user-del no## 是否开启AOF文件持久化appendonly no## AOF文件名appendfilename "appendonly.aof"## AOF同步策略appendfsync everysec## 正在导入时，是否停止同步aof文件no-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yesaof-use-rdb-preamble yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events ""hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-size -2list-compress-depth 0set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000stream-node-max-bytes 4096stream-node-max-entries 100activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit replica 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10dynamic-hz yesaof-rewrite-incremental-fsync yesrdb-save-incremental-fsynjemalloc-bg-thread yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-持久化</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/chi-jiu-hua/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><blockquote><p>把当前进程数据生成快照保存在硬盘</p></blockquote><h3 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h3><ol><li>手动执行 <code>dgsave</code> 。</li><li>使用save 相关配置 ， <code>save m n</code> 。表示m秒内数据集存在n次修改时，自动触发 <code>bgsave</code> 。</li><li>从节点执行全量复制，主节点自动执行 <code>bgsave</code> 生成RDB文件并发送给从节点。</li><li>执行 <code>debug reload</code> 重新加载redis时。</li><li>在没有开启AOF的情况下执行 <code>shutdown</code> 。</li><li>执行 <code>flushall</code> ，在这种情况下，会删除所有数据，即RDB文件也会是空的。<strong>谨慎操作</strong></li></ol><h3 id="生成流程"><a href="#生成流程" class="headerlink" title="生成流程"></a>生成流程</h3><ol><li>父进程执行bgsave，会fork子进程，由子进程生成RDB文件。</li><li>fork 子进程过程中会阻塞，fork完成后，父子进程并行，父进程可以处理其他操作。</li><li>子进程根据父进程内存生成临时快照文件，完成后对原文件进行原子替换。</li><li>子进程发送信号给父进程表示完成，父进程更新统计信息</li></ol><blockquote><p>在生成RDB文件过程中产生的数据无法备份。</p></blockquote><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105839.jpeg" alt="rdb.jpg"></p><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><p>保存： 保存在dir/dbfilename 下 。 dir、dbfilename为配置项。</p><p>压缩： <code>dbcompression yes</code> 默认开启，采用LZF算法进行压缩。</p><p>校验： 加载RDB文件时，可能存在文件的损坏。 采用 <code>redis-check-dump</code> 工具进行检测。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><blockquote><ol><li>持久化每次的写命令，重启时再执行AOF中命令进行数据恢复。主要的解决数据持久化的实时性。</li><li>开启AOF设置参数 <code>appendonly yes</code> ，默认不开启。</li><li>文件名设置参数 <code>appendfilename</code> 指定，默认为 appendonly.aof。</li></ol></blockquote><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><ol><li>写命令执行，会追加到缓存（命令写入）</li><li>AOF缓存区根据对应的策略向硬盘做同步操作（文件同步）</li><li>AOF文件过大，需要定期重写AOF文件（文件重写）</li><li>重启服务加载AOF（AOF加载）</li></ol><h3 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h3><h4 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h4><blockquote><p>使用 <code>appendfsync</code> 参数控制，默认为 <code>appendfsync everysec</code></p></blockquote><table><thead><tr><th>可配置项</th><th>说明</th></tr></thead><tbody><tr><td>always</td><td>命令写入缓存后，调用系统fsync同步数据到硬盘AOF文件中，然后线程返回</td></tr><tr><td>everysec</td><td>命令写入缓存后，调用系统write操作，然后线程返回。fsync同步文件操作由专门线程每秒调用一次。fsync同步可能失败或同步时间超过1秒，若主线程判断距上一次同步成功超过2秒，则会阻塞主线程，直到同步操作完成。保证了最多可能丢失2秒数据。</td></tr><tr><td>no</td><td>命令写入缓存后，调用系统write操作，然后线程返回。fsync同步文件操作由操作系统负责何时执行，通常同步周期最长30秒</td></tr></tbody></table><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105849.jpeg" alt="image.png"></p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105856.png" alt="image.png"></p><h3 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h3><blockquote><ol><li>重写是通过<strong>丢弃进程中超时的数据</strong>、<strong>去除旧AOF文件中无效的命令</strong>以及<strong>将多条写命令合并为一个</strong>的操作。</li></ol></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="触发时机-1"><a href="#触发时机-1" class="headerlink" title="触发时机"></a>触发时机</h4><p><strong>手动触发</strong>： 直接调用 <code>bgrewriteaof</code> 命令</p><p><strong>自动触发</strong>： 根据*<strong>auto-aof-rewrite-min-size*</strong> 和  *<strong>auto-aof-rewrite-percentage*</strong> 参数确定触发时机。</p><p><em><strong>auto-aof-rewrite-percentage</strong></em> ，当前的aof文件的大小超过上一次文件大小的百分比时，会触发重写。</p><p><em><strong>auto-aof-rewrite-min-size</strong></em> ，限制了允许重写的最小文件大小，当aof文件达到这个值时，触发重写。</p><p>《redis开发与运维》<strong>P159</strong>看具体公式</p><h4 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h4><ol><li>若当前已经存在AOF重写了，流程返回。 若当前正在执行 <code>bgsave</code> ,重写命令等待 <code>bgsave</code> 完成后继续执行。步骤1）</li><li>fork 子进程，fork完成后父进程继续工作。步骤 2）、3.1）</li><li>由于fork操作运用写时复制技术，子进程只能共享fork操作时的内存数据。*<strong>aof_rewrite_buf*</strong> 保存的是fork之后父进程新写入的数据。步骤3.2）</li><li>子进程根据内存快照，按照命令合并规则写入到新的AOF文件。批量写入磁盘由 <code>aof-rewrite-incremental-fsync yes</code> 控制默认32MB。步骤4）</li><li>父进程把 *<strong>aof_rewrite_buf*</strong>   中的数据追加到新的AOF文件。 步骤5.2）</li><li>使用新的AOF文件的替换旧的文件，完成AOF重写。步骤5.3）</li></ol><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105906.jpeg" alt="AOF重写.jpg"></p><h3 id="重启加载"><a href="#重启加载" class="headerlink" title="重启加载"></a>重启加载</h3><ol><li><p>若开启了AOF持久化的，优先加载AOF文件。</p></li><li><p>若加载过程中发现AOF文件损坏，可尝试采用 <code>redis-check-aof --fix</code> 命令进行修复，修复前先备份AOF文件。</p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210918105914.jpeg" alt="重启加载.jpg"></p></li></ol><h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2><ol><li>redis4.0开始支持</li><li>开启方式： <code>aof-use-rdb-preamble true</code> </li><li>开启之后，AOF重写会把内存中数据以RDB方式写到AOF中，再将重写缓存区的数据追加到AOF中，最后将含有RDB格式和AOF格式的AOF文件覆盖旧的AOF文件。</li><li>重启加载时，也是优先加载AOF</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>持久化模式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>RDB</td><td>重启加载速度比AOF快文件体积比整个实例内存小，在传输速度上快，适合做容灾恢复的备份</td><td>没法做到实时持久化、不能保证数据完整性可阅读性差由于采用特定的二进制格式保存，多个版本之间可能存在兼容性的问题</td><td>主从全量数据同步数据库备份对于丢失数据不敏感的业务场景，实例宕机后快速恢复</td></tr><tr><td>AOF</td><td>能保证数据实时持久化，秒级丢失兼容性好，基于redis通讯协议（RDSP）的写命令追加可阅读性好</td><td>数据文件体积大，即便有重写机制，但在相同数据集下,AOF还是比RDB文件大恢复速度比RDB慢</td><td></td></tr><tr><td>混合模式</td><td>既能快速备份又能避免大量数据丢失</td><td>RDB是压缩格式，AOF文件可读性差。不兼容4.0以下的版本</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-客户端连接</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/ke-hu-duan-lian-jie/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/ke-hu-duan-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>修改配置redis.conf</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">## 注释掉，能监听到远程主机的连接## bind 127.0.0.1## 关闭保护模式，保护模式下，远程主机无法访问redisprotected-mode no## 身份验证密码requriepass root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRedisClient</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> HOST <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>  <span class="token keyword">final</span> <span class="token class-name">Integer</span> PORT <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> AUTH <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token comment">// Jedis 直连，每次都会新建TCP连接</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">// 要记得的管理资源哦  jedis.close()</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>HOST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// HOST 为redis 主机地址，端口默认为6379</span>            jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>AUTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 授权</span>            jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scheme</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test:hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test:redis"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// JedisPool连接</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">jedisPoolTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 创建连接池</span>        <span class="token comment">// 可通过final GenericObjectPoolConfig config = new GenericObjectPoolConfig();  配置连接池</span>        <span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得连接</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 授权</span>            jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>AUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test:hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test:redis"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRedisClient</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> HOST <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> PORT <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTH <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lettuceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"redis://"</span> <span class="token operator">+</span> AUTH <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> HOST<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>PORT<span class="token punctuation">;</span>        <span class="token class-name">RedisClient</span> redisClient <span class="token operator">=</span> <span class="token class-name">RedisClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StatefulRedisConnection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> connect <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCommands</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> commands <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> commands<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reddison"><a href="#Reddison" class="headerlink" title="Reddison"></a>Reddison</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><blockquote><ol><li>SpringBoot 1.x底层使用的Jedis，2.x 之后选用 Lettuce</li><li>springboot 使用redis 十分简单只要配置属性即可</li><li>自动配置原理查看 org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration类</li><li>学成工具类可参考<a href="https://www.jianshu.com/p/5596c3a4978d">springboot redis 项目实战 完整篇</a> <code>RedisUtil.java</code> 的实现</li></ol></blockquote><h3 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token comment">&lt;!--springboot中的redis依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- test依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## application.yml</span><span class="token comment">## 基本配置,要配置其他参数参考org.springframework.boot.autoconfigure.data.redis.RedisProperties类</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>//root@ip<span class="token punctuation">:</span><span class="token number">6379</span> <span class="token comment">## redis://password@example.com:6379</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><blockquote><p>实体类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpringBootRedis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">// 添加k-v序列化</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jacksonSeial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jacksonSeial<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jacksonSeial<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置hash key 和value序列化模式</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jacksonSeial<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span> haha <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test:redis:springboot"</span><span class="token punctuation">,</span> <span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span> test <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test:redis:springboot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>haha<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 字符</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ValueOperations</span> opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token function">buildUser</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opsForValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// hash</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testRedisHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> hashName <span class="token operator">=</span><span class="token string">"test:hash:type"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">HashOperations</span> opsForHash <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForHash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hashName<span class="token punctuation">,</span><span class="token string">"SH"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForHash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hashName<span class="token punctuation">,</span><span class="token string">"ZH"</span><span class="token punctuation">,</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======hget=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opsForHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hashName<span class="token punctuation">,</span> <span class="token string">"SH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======hmget=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForHash<span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>hashName<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"SH"</span><span class="token punctuation">,</span> <span class="token string">"ZH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======hvals=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForHash<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>hashName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======hkeys=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opsForHash<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>hashName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> <span class="token function">buildUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-数据类型</title>
      <link href="/shu-ju-ku/shu-ju-ku/redis/redis-shu-ju-lei-xing/"/>
      <url>/shu-ju-ku/shu-ju-ku/redis/redis-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串对象的编码可以是int、raw或者embstr。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表对象的编码可以是ziplist或者linkedlist。</p><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>哈希对象的编码可以是ziplist或者hashtable。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合对象的编码可以是intset或者hashtable。</p><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><ul><li>有序集合的编码可以是ziplist或者skiplist。</li></ul><ul><li>为什么有序集合需要同时使用跳跃表和字典来实现？</li></ul><p>在理论上，有序集合可以单独使用字典或者跳跃表的其中一种数据结构来实现，但无论单独使用字典还是跳跃表，在性能上对比起同时使用字典和跳跃表都会有所降低。举个例子，如果我们只使用字典来实现有序集合，那么虽然以O（1）复杂度查找成员的分值这一特性会被保留，但是，因为字典以无序的方式来保存集合元素，所以每次在执行范围型操作——比如ZRANK、ZRANGE等命令时，程序都需要对字典保存的所有元素进行排序，完成这种排序需要至少O（NlogN）时间复杂度，以及额外的O（N）内存空间（因为要创建一个数组来保存排序后的元素）。</p><p>另一方面，如果我们只使用跳跃表来实现有序集合，那么跳跃表执行范围型操作的所有优点都会被保留，但因为没有了字典，所以根据成员查找分值这一操作的复杂度将从O（1）上升为O（logN）。因为以上原因，为了让有序集合的查找和范围型操作都尽可能快地执行，Redis选择了同时使用字典和跳跃表两种数据结构来实现有序集合。</p><ul><li>当有序集合对象可以同时满足以下两个条件时，对象使用ziplist编码：</li></ul><p>❑有序集合保存的元素数量小于128个；</p><p>❑有序集合保存的所有元素成员的长度都小于64字节；不能满足以上两个条件的有序集合对象将使用skiplist编码。</p><ul><li>以上两个条件的上限值是可以修改的，具体请看配置文件中关于zset-max-ziplist-entries选项和zset-max-ziplist-value选项的说明。</li></ul><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/1627398608544-66f37bf6-ffd7-4849-b46a-25c97e647363.png" alt="image.png"></p><p>简单动态字符串</p><p>双向链表</p><p>压缩链表</p><p>哈希表</p><p>跳表</p><p>整数数组</p><p>全局的哈希表</p><p>RedisObject</p><p>跳表：</p><ul><li>给有序单向链表添加多级索引，每一级索引包含一个向下指针和向后指针。</li><li>向下指针指向当前节点的下一级索引，向后指针指向当前层级的下一个节点。</li><li>跳表的时间复杂度是 O(logn) , 空间复杂度是O(n).</li><li>跳表和红黑数的时间复杂度一致，但比红黑树更易实现</li><li>跳表支持范围查找</li></ul><p>当插入或删除节点时，需要调整跳表的结构，防止跳表退化成单链表。</p><ul><li>当插入节点时，采用随机函数来决定节点插入的位置，比如随机生成h ，则在1-h层创建索引，并在单链表上加上节点</li><li>当删除节点时，若节点在索引上，需要删除索引上的节点和单链表上的节点；若节点只在单链表上，直接删除单链表上的节点。</li></ul><p>跳表结构如下：</p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/1627397378784-644268c3-cf7d-4f46-b025-74ef2f5f9d18.webp" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker下安装Mysql</title>
      <link href="/shu-ju-ku/shu-ju-ku/mysql/an-zhuang-mysql-docker/"/>
      <url>/shu-ju-ku/shu-ju-ku/mysql/an-zhuang-mysql-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的docker操作"><a href="#常见的docker操作" class="headerlink" title="常见的docker操作"></a>常见的docker操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 运行容器docker run --name &lt;容器name&gt; -v &lt;宿主机路径&gt;:&lt;容器路径&gt; -p &lt;宿主机端口&gt;:&lt;容器端口&gt; &lt;docker image&gt;## 启动容器docker start &lt;容器ID&gt;## 停止容器docker stop &lt;容器ID&gt;## 查看所有容器docker ps -a## 查看正在运行的容器docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="壹-拉取镜像"><a href="#壹-拉取镜像" class="headerlink" title="壹. 拉取镜像"></a>壹. 拉取镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 查找镜像docker search mysql## 拉取镜像docker pull mysql:5.7.33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贰-运行容器"><a href="#贰-运行容器" class="headerlink" title="贰. 运行容器"></a>贰. 运行容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name mysql-5.7.33 -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 -p 33060:33060 mysql:5.7.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="叁-访问mysql"><a href="#叁-访问mysql" class="headerlink" title="叁. 访问mysql"></a>叁. 访问mysql</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -h &lt;hostip&gt; -p &lt;port&gt; -u root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka基础概念</title>
      <link href="/mq/mq/kafka/kafka-ji-chu-gai-nian/"/>
      <url>/mq/mq/kafka/kafka-ji-chu-gai-nian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ基础概念</title>
      <link href="/mq/mq/rabbitmq/rabbitmq-ji-chu-gai-nian/"/>
      <url>/mq/mq/rabbitmq/rabbitmq-ji-chu-gai-nian/</url>
      
        <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><a href="https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html">RabbitMQ基础知识</a></p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/image-20210415230205297.png" alt="image-20210415230205297"></p><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><h4 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h4><h5 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h5><p>把所有发送到交换器的消息路由到所有与该交换器绑定的队列中。</p><p>此时的Binding Key 不起作用。</p><p>发布/订阅模式</p><h5 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h5><p>Routing Key 与 Binding Key 完全匹配。 </p><h5 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h5><h5 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h5><h4 id="Routing-Key"><a href="#Routing-Key" class="headerlink" title="Routing Key"></a>Routing Key</h4><p>生产者将消息发给交换器时，一般会指定一个Routing Key，用来指定这个消息的路由规则，而这个Routing Key需要与交换器的类型和绑定键（Binding key ）联合使用才能生效</p><h4 id="Binding-Key"><a href="#Binding-Key" class="headerlink" title="Binding Key"></a>Binding Key</h4><h4 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h4><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><h3 id="Docker-启动-Rabbit-MQ"><a href="#Docker-启动-Rabbit-MQ" class="headerlink" title="Docker 启动 Rabbit MQ"></a>Docker 启动 Rabbit MQ</h3><p>配置文件目录：/etc/rabbitmq</p><p>数据存储目录：/var/lib/rabbitmq</p><p>日志目录：/var/log/rabbitmq</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker stop rabbitmqdocker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -v $PWD/etc:/etc/rabbitmq -v $PWD/var/lib:/var/lib/rabbitmq -v $PWD/var/log:/var/log/rabbitmq rabbitmq:3-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用上面命令启动，可能会存在如下错误：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cannot touch '/etc/rabbitmq/rabbitmq.conf': Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给所挂载的文件夹加上所有人可访问的权限：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod 777 -R $PWD/etcchmod 777 -R $PWD/var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解</title>
      <link href="/java/java/spring/spring-annotation/"/>
      <url>/java/java/spring/spring-annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Configuration</td><td>申明配置类，类似XML配置文件</td></tr><tr><td>@Bean</td><td>在配置类中注册的Spring对象。 类似 XML中 <code>&lt;Bean&gt;&lt;/Bean&gt;</code></td></tr><tr><td>@ComponentScan</td><td>扫描注解</td></tr><tr><td>@Scope</td><td>指定Bean的作用域</td></tr><tr><td>@Lazy</td><td>懒加载</td></tr><tr><td>@Conditional</td><td>按照一定的条件进行判断，满足条件则给容器中注册Bean</td></tr><tr><td>@Import</td><td>导入组件</td></tr></tbody></table><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>扫描注解，可以有多种方法进行扫描的配置。</p><ul><li>扫描指定包下的注解<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.myproject.example.springanno"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>通过TypeFilter指定过滤规则<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.myproject.example.springanno"</span><span class="token punctuation">,</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>           <span class="token comment">//  指定具体的注解</span>        <span class="token comment">//      @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {Controller.class}),</span>        <span class="token comment">// 指定具体的某个类</span>       <span class="token comment">// @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = {AnnoService.class}),</span>       <span class="token comment">// 指定自定义规则</span>        <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MyTypeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>@Filter 定义过滤规则<br>excludeFilters= Fileter[] 指定扫描时按照的什么规则排斥哪些组件<br>includeFilters= Fileter[] 指定扫描时，只需要包含哪些组件<br>指定type = FilterType.CUSTOM 时需要指定自定义实现接口TypeFilter的规则，如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTypeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span> metadataReader<span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span> metadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// MetadataReader metadataReader : 读取到当前正在扫描的类的信息</span>        <span class="token comment">// MetadataReaderFactory metadataReaderFactory : 获取到的其他任何类的信息</span>        <span class="token comment">// 获取当前类注解的信息</span>        <span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取当前正在扫描的类的信息</span>        <span class="token class-name">ClassMetadata</span> classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取当前类资源（类路径）</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FilterType</span> <span class="token punctuation">{</span><span class="token comment">/** * 过滤指定注解，默认是扫描所有注解 * @see org.springframework.core.type.filter.AnnotationTypeFilter */</span>ANNOTATION<span class="token punctuation">,</span><span class="token comment">/** * 过滤给定类型 * @see org.springframework.core.type.filter.AssignableTypeFilter */</span>ASSIGNABLE_TYPE<span class="token punctuation">,</span><span class="token comment">/** * 筛选匹配给定AspectJ类型模式表达式的注解 * @see org.springframework.core.type.filter.AspectJTypeFilter */</span>ASPECTJ<span class="token punctuation">,</span><span class="token comment">/** * 过滤匹配给定正则表达式模式的注解. * @see org.springframework.core.type.filter.RegexPatternTypeFilter */</span>REGEX<span class="token punctuation">,</span><span class="token comment">/**  * 使用给定的自定义过滤 * {@link org.springframework.core.type.filter.TypeFilter} implementation. */</span>CUSTOM<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>指定Bean 的作用域</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"scopeName"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     *   prototype 原型，每次获取实例，创建一次实例     *   singleton 单例（默认值）， IOC容器启动会调用方法创建对象放到IOC容器中，以后每次获取就是直接从容器（map.get()）中拿     *   request 同一个请求创建一个实例，在web环境中使用     *   session 同一个session创建一个实例，在web 环境中使用     */</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">scopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">ScopedProxyMode</span> <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p><code>@Conditional({Condition.class})</code> 可作用于类和bean</p><p>Condition的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnno1Condition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ConditionContext context：判断条件能使用的上下文信息</span>        <span class="token comment">// AnnotatedTypeMetadata metadata ： 注解信息</span>                <span class="token comment">// 获取 bean 注册信息</span>        <span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 满足条件才返回true</span>        <span class="token comment">// ...</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnno2Condition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ConditionContext context：判断条件能使用的上下文信息</span>        <span class="token comment">// AnnotatedTypeMetadata metadata ： 注解信息</span>                <span class="token comment">// 获取 bean 注册信息</span>        <span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 满足条件才返回true</span>        <span class="token comment">// ...</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Condition 的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.myproject.example.springanno"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MyAnno1Condition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyAnno1</span> <span class="token function">myAnno1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">MyAnno1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MyAnno2Condition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyAnno2</span> <span class="token function">myAnno2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">MyAnno2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><ol><li>@Import(要导入到容器中的组件)，容器中就会自动注册这个组件，id默认是全名</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 会将Color类注册成Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>ImportSelector:返回需要导入的组件的全类名数组（SpringBoot自动配置使用的该方法,见EnableAutoConfigurationImportSelector.class 的实现）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyAnnoImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 会将MyAnnoImportSelector返回的一系列类注册成Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnoImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 返回值不能为NULL，否则会抛NPE</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>ImportBeanDefinitionRegistrar :手动注册bean到容器中</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyAnnoImportBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 实现注册Bean的逻辑</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnoImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//AnnotationMetadata importingClassMetadata ：当前类的注册信息</span>        <span class="token comment">// BeanDefinitionRegistry registry ： BeanDefinition注册类，</span>        <span class="token comment">// 把所有需要添加到容器中的bean，通过调用BeanDefinitionRegistry.registerBeanDefinition方法手工进行注册</span>                <span class="token comment">// 通过RootBeanDefinition进行bean 的定义，然后注册</span>        <span class="token class-name">RootBeanDefinition</span> rootBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">MyAnno</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myAnno"</span><span class="token punctuation">,</span>rootBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="给容器注册组件的四种方式"><a href="#给容器注册组件的四种方式" class="headerlink" title="给容器注册组件的四种方式"></a>给容器注册组件的四种方式</h2><h3 id="1-包扫描-组件标注注解"><a href="#1-包扫描-组件标注注解" class="headerlink" title="1. 包扫描 + 组件标注注解"></a>1. 包扫描 + 组件标注注解</h3><p>一般是用于自己定义的bean</p><h3 id="2-Bean"><a href="#2-Bean" class="headerlink" title="2. @Bean"></a>2. @Bean</h3><p>一般用于导入第三方包里面的组件</p><h3 id="3-Import"><a href="#3-Import" class="headerlink" title="3. @Import"></a>3. @Import</h3><p>快速导入一个组件</p><h3 id="4-使用Spring-提供的FactoryBean-工厂Bean"><a href="#4-使用Spring-提供的FactoryBean-工厂Bean" class="headerlink" title="4. @使用Spring 提供的FactoryBean(工厂Bean)"></a>4. @使用Spring 提供的FactoryBean(工厂Bean)</h3><blockquote><ol><li>默认获取的是工厂Bean调用getObject创建的对象</li><li>要想获取工厂Bean本身，需要在id前面加一个&amp; ，如 <code>AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AnnoConfig.class);  Object beanFactory = context.getBean("&amp;myAnnoFactory");</code></li></ol></blockquote><h4 id="FactoryBean的使用"><a href="#FactoryBean的使用" class="headerlink" title="FactoryBean的使用"></a>FactoryBean的使用</h4><ol><li>创建一个FactoryBean<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyAnnoFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyAnno</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token comment">// 返回一个Myanno 对象，会注册到容器中的</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">MyAnno</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAnno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">MyAnno</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 设置是否单实例bean</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>注册FactoryBean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MyAnnoFactory</span> <span class="token function">myAnnoFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">MyAnnoFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用FactoryBean注册的bean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AnnoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyAnno</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyAnno</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myAnnoFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得MyAnnoFactory bean本身</span>        <span class="token comment">// MyAnnoFactory bean = (MyAnnoFactory)context.getBean("&amp;myAnnoFactory");</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBean的依赖查找与注册"><a href="#SpringBean的依赖查找与注册" class="headerlink" title="SpringBean的依赖查找与注册"></a>SpringBean的依赖查找与注册</h2><h3 id="SpringBean的查找来源"><a href="#SpringBean的查找来源" class="headerlink" title="SpringBean的查找来源"></a>SpringBean的查找来源</h3><ol><li><p>用户定义BeanDefintin</p></li><li><p>API调用的单例对象</p></li><li><p>Spring内置BeanDefintion和内置单例对象。<br> <img src="https://gitee.com/lauhom/note-image/raw/master/image/Spring-%E5%86%85%E5%BB%BABeanDefinition.png" alt="20200802212025196_29462"></p></li></ol><p>  <img src="https://gitee.com/lauhom/note-image/raw/master/image/Spring-%E5%86%85%E5%BB%BA%E5%8D%95%E4%BE%8BBeanDefinition.png" alt="20200802212228027_15528"></p><h3 id="SpringBean-依赖注入来源"><a href="#SpringBean-依赖注入来源" class="headerlink" title="SpringBean 依赖注入来源"></a>SpringBean 依赖注入来源</h3><ol><li>用户定义BeanDefintion</li><li>API调用的单例对象</li><li>非Spring容器管理对象（Resolvable Dependency） （这种情况下的对象无法通过依赖查找获取）<img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000021.png" alt="20200802213715635_14837"> 最后在下面的map中进行管理<br> <img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000038.png" alt="20200802213821268_21426"></li><li>外部化配置</li></ol><h3 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h3><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000112.png" alt="20200802185135456_25858"></p><h2 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h2><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000127.png" alt="20200802223402589_12928"><br><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000142.png" alt="20200802230510969_12086"></p><p>Spring 会管理Singleton Bean 的全生命周期，而对于Prototype Bean自创立以后便不管了</p><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><h2 id="配置元信息"><a href="#配置元信息" class="headerlink" title="配置元信息"></a>配置元信息</h2><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/20210319000206.png" alt="20200806143818287_7958"><br>GenericBeanDefinition : 一个通用的BeanDefinition，所有由资源加载的bean 在未进行合并之前的状态<br>RootBeanDefinition： 没有parentname熟悉，合并之后的beandefinition状态<br>AnnotatedBeanDefinition ： 注解相关</p><h4 id="AttributeAccessor-BeanMetadataElement"><a href="#AttributeAccessor-BeanMetadataElement" class="headerlink" title="AttributeAccessor \ BeanMetadataElement"></a>AttributeAccessor \ BeanMetadataElement</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinition</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeAccessor</span><span class="token punctuation">,</span> <span class="token class-name">BeanMetadataElement</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AttributeAccessor 属性上下文存储， 设置附加属性，对初始化bean没有直接影响。用于在bean的生命周期使用<br>BeanMetadataElement 获取DB 定义的来源</p><h4 id="XmlBeanDefinitionReader-doLoadBeanDefinitions"><a href="#XmlBeanDefinitionReader-doLoadBeanDefinitions" class="headerlink" title="XmlBeanDefinitionReader#doLoadBeanDefinitions"></a>XmlBeanDefinitionReader#doLoadBeanDefinitions</h4><p>基于XML资源装载Spring Bean配置元信息</p><p>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#populateDefaults 处理<code>&lt;beans/&gt;</code>的一些默认属性<br>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#parseDefaultElement 处理<code>&lt;import/&gt;</code>、<code>&lt;alias/&gt;</code>、<code>&lt;beans/&gt;</code>、<code>&lt;bean/&gt;</code>标签<br>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseCustomElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition) 处理自定义扩展的标签，如bubbo 、mybatis 中的自定义标签</p><pre class="line-numbers language-puml" data-language="puml"><code class="language-puml">@startumlparticipant User as userparticipant XmlBeanDefinitionReader as bd_readerparticipant DefaultDocumentLoader as doc_loaderparticipant DefaultBeanDefinitionDocumentReader as bd_doc_readerparticipant BeanDefinitionParserDelegate as bd_par_deleguser -&gt; bd_reader : loadBeanDefinitions(EncodedResource encodedResource)activate bd_readerbd_reader -&gt; bd_reader : doLoadBeanDefinitions(InputSource inputSource, Resource resource)bd_reader-&gt;doc_loader:loadDocumentactivate doc_loadernote left以DOM方式解析xml文件，生成Document对象end notedoc_loader--&gt;bd_reader:return Document对象deactivate doc_loaderbd_reader-&gt;bd_doc_reader : registerBeanDefinitionsnote left将Docment对象与BeanDefinition进行对应，并注入的beanfactory中end noteactivate bd_doc_readerbd_doc_reader-&gt;bd_doc_reader:doRegisterBeanDefinitions(Element root)bd_doc_reader-&gt;bd_doc_reader:parseBeanDefinitions(Element root)bd_doc_reader-&gt;bd_doc_reader: parseDefaultElement(Element ele)note left判断xml文件的命名空间是否为http://www.springframework.org/schema/beans，若是则解析默认的标签：&lt;import/&gt;、&lt;alias/&gt;、&lt;beans/&gt;、&lt;bean/&gt;end note bd_doc_reader-&gt;bd_par_deleg:parseCustomElement(Element ele)note left若不是默认的命名空间，则使用自定义的hander类处理xmlend notebd_doc_reader--&gt;bd_reader:导入的beanBefinition个数deactivate bd_doc_readerbd_reader--&gt;user: 导入的beanBefinition个数@enduml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="org-springframework-context-annotation-AnnotatedBeanDefinitionReader-register"><a href="#org-springframework-context-annotation-AnnotatedBeanDefinitionReader-register" class="headerlink" title="org.springframework.context.annotation.AnnotatedBeanDefinitionReader#register"></a>org.springframework.context.annotation.AnnotatedBeanDefinitionReader#register</h4><p>基于Annotation 装载spring bean元信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">BeanDefinitionCustomizer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 获取beanClass上的注解元信息，包装的在AnnotatedGenericBeanDefinition中</span><span class="token class-name">AnnotatedGenericBeanDefinition</span> abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ScopeMetadata</span> scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 作用域设置</span><span class="token comment">// beanname自动生成</span><span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 一些特定的注解属性设置 @Lazy、@Primary、@DependsOn、@Role、@Description</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Primary</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Lazy</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>customizers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionCustomizer</span> customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment">// 将的bean元信息包装到BeanDefinitionHolder中</span><span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册bean</span><span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>通过反射解析要加载的类的注解元信息为 <code>AnnotationMetadata</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// org.springframework.context.annotation.AnnotatedBeanDefinitionReader#doRegisterBean</span><span class="token class-name">AnnotatedGenericBeanDefinition</span> abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>===&gt;&gt;&gt;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition</span><span class="token keyword">public</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">.</span><span class="token function">introspect</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>===&gt;&gt;&gt;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// org.springframework.core.type.AnnotationMetadata</span><span class="token keyword">static</span> <span class="token class-name">AnnotationMetadata</span> <span class="token function">introspect</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">StandardAnnotationMetadata</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-XML-标签扩展"><a href="#Spring-XML-标签扩展" class="headerlink" title="Spring XML 标签扩展"></a>Spring XML 标签扩展</h3></li><li><p>需要新建的文件<br> spring.handlers<br> spring.schemas<br> xxx.xsd</p></li><li><p> extends NamespaceHandlerSupport  实现init()，完成自定义的BeanDefinitionParser的注册</p></li><li><p>implements BeanDefinitionParser 实现parse()方法，完成xml标签到beanDefinition的定义</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10搭建k8s</title>
      <link href="/shou-cang/shou-cang/k8s-for-windows10/"/>
      <url>/shou-cang/shou-cang/k8s-for-windows10/</url>
      
        <content type="html"><![CDATA[<h2 id="windows10家庭版安装hyper-v"><a href="#windows10家庭版安装hyper-v" class="headerlink" title="windows10家庭版安装hyper-v"></a>windows10家庭版安装hyper-v</h2><p><a href="https://zhuanlan.zhihu.com/p/356396288">Win10家庭中文版安装Hyper-V - 知乎 (zhihu.com)</a></p><p>以管理员运行hyper-v.cmd</p><h2 id="windows-安装choco"><a href="#windows-安装choco" class="headerlink" title="windows 安装choco"></a>windows 安装choco</h2><ol><li><p>choco是windows下的包管理器</p></li><li><p>使用如下命令进行安装</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token string">"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe"</span> <span class="token operator">-</span>NoProfile <span class="token operator">-</span>InputFormat None <span class="token operator">-</span>ExecutionPolicy Bypass <span class="token operator">-</span>Command <span class="token string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; <span class="token function">SET</span> <span class="token string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这样安装后，通过<code>choco install xx</code> 安装程序，会默认安装在路径<code>c:\ProgramData\chocolatey\lib</code>下。</p></li><li><p>修改默认安装目录，可通过修改系统变量<code>ChocolateyInstall</code>为自定义的目录。</p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/image-20210822214722826.png" alt="image-20210822214722826"></p></li><li><p>这样改可能会导致<code>choco</code>命令没法使用，所以我干脆直接将<code>c:\ProgramData\chocolatey</code>转移到了<code>D:\ProgramData\chocolatey</code>下，并修改系统变量path。</p><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/image-20210822215149949.png" alt="image-20210822215149949"></p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token string">"https://oteqq9cn.mirror.aliyuncs.com"</span><span class="token punctuation">,</span> <span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">,</span> <span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span> <span class="token string">"https://dockerhub.azk8s.cn"</span><span class="token punctuation">,</span> <span class="token string">"https://reg-mirror.qiniu.com"</span><span class="token punctuation">,</span> <span class="token string">"https://hub-mirror.c.163.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">k8s.gcr.io/pause</span><span class="token punctuation">:</span><span class="token attr-value">3.4.1=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.4.1</span><span class="token attr-name">k8s.gcr.io/kube-controller-manager</span><span class="token punctuation">:</span><span class="token attr-value">v1.21.3=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.21.3</span><span class="token attr-name">k8s.gcr.io/kube-scheduler</span><span class="token punctuation">:</span><span class="token attr-value">v1.21.3=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.21.3</span><span class="token attr-name">k8s.gcr.io/kube-proxy</span><span class="token punctuation">:</span><span class="token attr-value">v1.21.3=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.21.3</span><span class="token attr-name">k8s.gcr.io/kube-apiserver</span><span class="token punctuation">:</span><span class="token attr-value">v1.21.3=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.21.3</span><span class="token attr-name">k8s.gcr.io/etcd</span><span class="token punctuation">:</span><span class="token attr-value">3.4.13-0=registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0</span><span class="token attr-name">k8s.gcr.io/coredns/coredns</span><span class="token punctuation">:</span><span class="token attr-value">v1.8.0=registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.8.0</span><span class="token attr-name">quay.io/kubernetes-ingress-controller/nginx-ingress-controller</span><span class="token punctuation">:</span><span class="token attr-value">0.26.1=registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker pull coredns/coredns:1.8.0</p><hr><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>在powershell 中切换到admin</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">start-process</span> powershell <span class="token operator">-</span>verb runas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网址</title>
      <link href="/shou-cang/shou-cang/wang-zhi/"/>
      <url>/shou-cang/shou-cang/wang-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora-PicGo-Gitee-图床"><a href="#Typora-PicGo-Gitee-图床" class="headerlink" title="Typora + PicGo + Gitee 图床"></a>Typora + PicGo + Gitee 图床</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/75994966">github 加速</a></li><li><a href="https://kzcy.gitee.io/2020/08/27/20bc1cc603ce/">Gitee+PicGo图床搭建笔记</a></li><li><a href="https://www.jb51.net/os/win10/526668.html">win10修改hosts文件需要管理员权限怎么办</a></li></ol><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>使用hexo + github pages 搭建自己的博客。</p><p>客户机必须安装node + git ， 使用Typeora 进行编辑。</p><ol><li><p><a href="https://yushuaigee.gitee.io/2021/01/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%BA%8C">从零开始免费搭建自己的博客(二)——基于 GitHub pages 建站 | 半亩方塘 (gitee.io)</a>——基于 GitHub pages 建站/#2-安装-Hexo-发布插件)</p></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery主题</a></p></li><li><p><a href="https://hexo.io/zh-cn/">Hexo</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p></li><li><p>常用命令</p></li></ol><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">hexo new -p &lt;文章相对路径&gt; &lt;title&gt; hexo cleanhexo ghexo shexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/shu-ju-ku/shu-ju-ku/mysql/mysql/"/>
      <url>/shu-ju-ku/shu-ju-ku/mysql/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql-架构"><a href="#MySql-架构" class="headerlink" title="MySql 架构"></a>MySql 架构</h1><p><img src="https://gitee.com/lauhom/note-image/raw/master/image/image-20210706224046239.png" alt="image-20210706224046239"></p><h2 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h2><p>负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>在更新操作频繁的场景，缓存命中率低，不建议使用。</p><p>但从mysql 8.0开始，已经去掉了<strong>查询缓存</strong>机制。</p><p>在8.0之前使用可以使用设置query_cache_type为DEMAND, 这样默认sql语句不使用缓存。</p><p>对于需要使用缓存的sql ，使用SQL_CACHE显式指定：<code>select SQL_CACHE * FROM T WHERE ID = 10</code>。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>词法分析– 语法分析</p><p>分析sql 语句的正确性</p><blockquote><p>语法解析器 antlr \calcite</p></blockquote><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>选择语句的最优执行方式，确定执行计划</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>开始执行语句，根据表的引擎定义，调用对应引擎的接口。</p><p>在执行之前还会进行权限校验(在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p><h1 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h1><p>sql 的更新过程涉及两个重要的日志模块： redo log（重做日志） 和bin log （归档日志）。</p><p>redo log 用于保证 crash-safe 能力。</p><p>innodb_flush_log_at_trx_commit 这个参数设置成1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><h2 id="redo-log-重做日志"><a href="#redo-log-重做日志" class="headerlink" title="redo log (重做日志)"></a>redo log (重做日志)</h2><p>redo log 是innoDB引擎特有的日志。</p><p>WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。</p><p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</p><h2 id="bin-log-归档日志"><a href="#bin-log-归档日志" class="headerlink" title="bin log (归档日志)"></a>bin log (归档日志)</h2><p>binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p><p>？？ 》》》</p><ol><li><p>innodb会在什么时候更新到磁盘？</p></li><li><p>redo log的具体内容？</p></li><li><p>bin log 的具体内容？</p></li><li><p>redo log 和bin log 的区别？</p><ul><li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p></li><li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；</p><p>binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p></li><li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></li></ul></li></ol><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>主键索引、非主键索引</p><p>回表，覆盖索引    </p><p>最左前缀原则</p><p>索引下推：</p><p>在 MySQL 5.6 之前，只能从非主键索引中查到的第一个行 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p><strong>注意：重建主键索引的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。可以用这个语句代替 ： alter table T engine=InnoDB。</strong></p><p>索引数据存储于磁盘，会以分页或分片的形式加载到内存。</p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><ol><li><p>全库逻辑备份时使用。</p></li><li><p>使用命令Flush tables with read lock(FTWRL).</p></li><li><p>在innodb 中会使用mysqldump 。当 mysqldump 使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p></li><li><p>使用 set global readonly=true 会使全库进入只读状态。</p></li><li><p>使用FTWL而不使用readonly锁定全库的理由？</p><p>一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</p><p>二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</p></li></ol><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><ol><li><p>包括表锁和元数据锁（meta data lock）。</p></li><li><p>表锁： lock tables … read/write ， 如：<code>lock tables t1 read,t2 write</code>. </p></li><li><p>lock tables 语法除了会限制别的线程的读写外，也会限制本线程接下的操作对象。比如一个线程在执行unlock tables 之前，已经获得了表T 的读锁，那么该线程对表T是不可写的。</p></li><li><p>DML锁：不需要显示的使用，在访问一个表的时候会自动加上。</p></li><li><p>DML锁分为读锁和写锁，读读之间不互斥，读写、写写之间互斥。</p></li></ol><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>记录锁（Record）</p><p>间隙锁（Gap） 主要目的是为了解决在可重复读下，避免幻读。</p><ul><li>间隙锁会锁住一个范围。</li><li>不包括记录本身</li><li>主键索引、辅助索引、非索引字段查找都会产生间隙锁</li></ul><p>临键锁（Next-Key）: 当前记录锁 + 当前记录前的间隙锁</p><p>谓词锁（Predicat）</p><p><a href="https://cloud.tencent.com/developer/article/1447138">【官方文档】mysql gap lock next-key lock - 云+社区 - 腾讯云 (tencent.com)</a></p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>当出现死锁以后，有两种策略：</p><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout 来设置。</p><p>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p><p>在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p><p>所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p><p>但当热点行更新时，死锁检测要消耗大量的CPU资源。</p><p>解决热点行更新问题：</p><ol><li>保证业务不会出现死锁。</li><li>控制并发度。</li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>ACID： 原子性、一致性、隔离性、持久性</p><p>并发事务的带来的问题：</p><ul><li>脏读</li><li>不可重复读（重点是修改）</li><li>幻读（重点是新增和删除）</li></ul><p>隔离级别：</p><ul><li>读未提交-  啥问题都没解决</li><li>读已提交- 解决脏读</li><li>可重复读- 解决脏读、不可重复读</li><li>可串行化- 解决脏读、不可重复读、幻读</li></ul><p>mysql默认隔离级别： 可重复读</p><p>oracle默认隔离级别： 读已提交</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="/java/java/bing-fa-bian-cheng/bing-fa-bian-cheng/"/>
      <url>/java/java/bing-fa-bian-cheng/bing-fa-bian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>锁</li><li>AQS</li><li>原子类</li><li>线程池</li></ul></blockquote><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li>synchronized/wait</li><li>volatile + CAS (无锁机制)<ul><li>ABA问题（一个线程在修改变量a的过程中，另一个线程快速的将变量改成a-&gt;b-&gt;a,此时第一个线程是感知不到数据已经被修改过，这就是ABA问题）</li></ul></li></ul><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>JDK提供并发开发框架，抽象的队列同步器.</p><h4 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h4><p>用于记录未获取到锁的线程资源，结构为Node，这些线程会被阻塞。</p><ul><li><p>基于CLH的FIFO队列,双向队列</p></li><li><p>没竞争到的资源的线程，构建node(thread,mode) 放到同步队列的队尾， 并UNSAFE.park线程.</p></li><li><p>mode 分为独占式和共享式</p></li></ul><h4 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a>等待队列</h4><p>等待队列（条件队列）用于记录需要等待条件资源的线程，使用与同步队列相同Node结构。</p><ul><li>等待队列只有在获得锁的时候产生；</li><li>当条件资源不足时，加入等待队列，对应线程会释放锁；</li><li>当条件资源满足时，会将线程加入到同步队列，重新获取锁。</li><li>condition.await() : 将当前线程节点从同步队列移到等待队列中，释放锁； 当await返回时，会尝试获取锁，将节点从等待队列回到同步队列。</li></ul><h4 id="队列Node状态"><a href="#队列Node状态" class="headerlink" title="队列Node状态"></a>队列Node状态</h4><blockquote><p>Status field, taking on only the values: </p><p>SIGNAL: The successor of this node is (or will soon be) blocked (via park), so the current node must unpark its successor when it releases or cancels. To avoid races, acquire methods must first indicate they need a signal, then retry the atomic acquire, and then, on failure, block. </p><p>CANCELLED: This node is cancelled due to timeout or interrupt. Nodes never leave this state. In particular, a thread with cancelled node never again blocks.</p><p>CONDITION: This node is currently on a condition queue. It will not be used as a sync queue node until transferred, at which time the status will be set to 0. (Use of this value here has nothing to do with the other uses of the field, but simplifies mechanics.) </p><p>PROPAGATE: A releaseShared should be propagated to other nodes. This is set (for head node only) in doReleaseShared to ensure propagation continues, even if other operations have since intervened. </p><p>0: None of the above The values are arranged numerically to simplify use.<br>Non-negative values mean that a node doesn’t need to signal.<br>So, most code doesn’t need to check for particular values, just for sign. </p><p>The field is initialized to 0 for normal sync nodes, and CONDITION for condition nodes. It is modified using CAS (or when possible, unconditional volatile writes).</p></blockquote><blockquote><p>SIGNAL: 这个节点的后继者已经（或即将）被阻塞（通过park），所以当前节点在释放或取消时必须解除其后继者的park。为了避免竞争，acquire 方法必须首先表明它们需要一个signal，然后重试原子获取，然后，在失败时，阻塞。</p><p>CANCELLED: 该节点由于超时或中断而被取消。节点永远不会离开这个状态。特别是，一个被取消节点的线程再也不会阻塞。</p><p>CONDITION：该节点当前处于条件队列中。在转移之前，它不会被用作同步队列节点，此时状态将被设置为0。 (在这里使用该值与该字段的其他用途无关，但简化了机制。)</p><p>PROPAGATE：一个releaseShared应该被传播到其他节点。这在doReleaseShared中设置（仅针对头部节点），以确保传播继续，即使其他操作已经介入。</p><p>0：以上都不是<br>为了简化使用，数值以数字方式排列。<br>非负值意味着一个节点不需要信号。<br>所以，大多数代码不需要检查特定的值，只需要检查信号。</p></blockquote><h4 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h4><h5 id="acquire"><a href="#acquire" class="headerlink" title="acquire()"></a>acquire()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment">// 模板方法，子类实现锁的获取，主要是对state的操作</span>           <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 若获取锁失败，则加入同步队列队尾和阻塞线程</span>           <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="addWaiter-enq"><a href="#addWaiter-enq" class="headerlink" title="addWaiter() / enq()"></a>addWaiter() / enq()</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当线程获取锁失败否，构建Node，并将其加入到同步队列队尾。</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>        <span class="token comment">// 快速尝试将Node添加到队尾，若失败则在enq()进行循环添加</span>        <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 使用一个死循环试图将Node添加到同步队列中，通过CAS将同步并发添加Node的请求变成了“串行化”。</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token comment">// 初始化同步队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Must initialize</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token comment">// 这里是保证并发加入队尾的关键。先标记当前Node为队尾节点tail，再做队尾节点的前置指针的设置。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued()"></a>acquireQueued()</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 独占、非中断模式下获取锁</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 前驱节点为head节点，则尝试获取锁，此时的head节点对应的线程一定是已经释放了锁的，执行了release()</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token comment">// 此时未获取到锁，会将线程阻塞，等待唤醒，唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现，主要看release()方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="shouldParkAfterFailedAcquire"><a href="#shouldParkAfterFailedAcquire" class="headerlink" title="shouldParkAfterFailedAcquire()"></a>shouldParkAfterFailedAcquire()</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 请求锁失败后，是否应该阻塞线程；</span><span class="token comment">// 判断前驱节点是否是SIGNAL状态，或前驱节点为CANCELLED则忽略，继续往前检索，直到检索到SIGNAL状态的节点。</span><span class="token comment">// 若检索不到则不会阻塞线程，线程会进入死循环，直到获取到锁为止。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>            <span class="token comment">/*             * This node has already set status asking a release             * to signal it, so it can safely park.             */</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/*             * Predecessor was cancelled. Skip over predecessors and             * indicate retry.             */</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">/*             * waitStatus must be 0 or PROPAGATE.  Indicate that we             * need a signal, but don't park yet.  Caller will need to             * retry to make sure it cannot acquire before parking.             */</span>            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="parkAndCheckInterrupt"><a href="#parkAndCheckInterrupt" class="headerlink" title="parkAndCheckInterrupt()"></a>parkAndCheckInterrupt()</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过park操作阻塞线程</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="release-）"><a href="#release-）" class="headerlink" title="release(）"></a>release(）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 释放锁</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 模板方法，子类实现锁的释放，主要是对state的操作</span>            <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒阻塞线程</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">// 唤醒同步队列中head节点之后的非CANCELLED的第一个后继节点的线程</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*         * If status is negative (i.e., possibly needing signal) try         * to clear in anticipation of signalling.  It is OK if this         * fails or if status is changed by waiting thread.         */</span>        <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * Thread to unpark is held in successor, which is normally         * just the next node.  But if cancelled or apparently null,         * traverse backwards from tail to find the actual         * non-cancelled successor.         */</span>        <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 这里从tail节点往前遍历寻找非CANCELLED节点</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment">// 唤醒阻塞中的线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="acquireInterruptibly"><a href="#acquireInterruptibly" class="headerlink" title="acquireInterruptibly()"></a>acquireInterruptibly()</h5><p>中断式请求锁，（没明白使用场景）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 外界线程可以直接中断当前线程</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在唤醒后直接抛出中断异常，中断当前线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tryAcquireNanos"><a href="#tryAcquireNanos" class="headerlink" title="tryAcquireNanos()"></a>tryAcquireNanos()</h5><p>独占式超时获取同步状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    nanosTimeout <span class="token operator">&gt;</span> spinForTimeoutThreshold<span class="token punctuation">)</span> <span class="token comment">// nanosTimeout &gt; 1000纳秒时，才会阻塞当前线程，否则就进入无条件的快速自旋。</span>                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>TODO </p><h4 id="线程阻塞"><a href="#线程阻塞" class="headerlink" title="线程阻塞"></a>线程阻塞</h4><p>park /unpark</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>锁的获取是顺序的，就像排队买票一样。</p><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><p>锁的获取是随机的，效率比非公平锁高，但可能出现饥饿的现象，而公平锁会减少“饥饿”发生的概率。</p><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>是指任意线程获取到锁之后能够再次获得该锁而不会被锁阻塞。</p><p>对锁的资源数进行增减，若同一个线程重复获取锁，锁资源数递增；释放锁，锁资源数递减；</p><p><strong>ReentrantLock</strong></p><p>默认是非公平锁</p><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>CAS实现</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
